---
title: "Analiza regresyjna"
author: "Łukasz Bilański"
format: 
  html:
    self-contained: true
    embed-resources: true
    toc: true
    toc-depth: 4
    toc-location: right
    toc-title: "Spis treści"
    number-sections: true
    number-depth: 4
    code-fold: show
    code-summary: "Show the code"
    code-tools: true
    code-block-bg: true
    code-block-border-left: "black"
    code-line-numbers: false
    code-copy: true
    html-math-method: katex
    smooth-scroll: true
    anchor-sections: true
    link-external-icon: true
    link-external-newwindow: true
    theme:
        light: cosmo
        dark: darkly
    fontsize: 1.0em
    linestretch: 1.5
execute:
  warning: false
  echo: true
  error: false
---

## Potrzebne biblioteki

```{r}
#| echo: false
library(tidymodels)
library(parsnip)
library(dplyr)

library(readr)
library(broom.mixed) 
library(dotwhisker)  
library(GGally)
```

## Wczytanie danych

```{r}
#| echo: false
dane <- read_csv("kc_house_data.csv")
```


```{r}
glimpse(dane)
```
```{r}
#| echo: false
set.seed(123)

dane <- dane |> 
  drop_na()

dane <- dane |> 
  select(price, bedrooms, bathrooms, sqft_living, sqft_lot, floors, waterfront, view, condition, grade, sqft_above, sqft_basement, yr_built, yr_renovated,sqft_living15, sqft_lot15) |> 
  mutate(waterfront = as.factor(waterfront),
         view = as.factor(view),
         condition = as.factor(condition),
         grade = as.factor(grade))
dane <- dane |> 
  sample_n(1000)

dane <- dane |> 
  rename(built_ago = yr_built,
         renovated_ago = yr_renovated) |> 
  mutate(
    built_ago = as.integer(format(Sys.Date(), "%Y")) - built_ago,
    renovated_ago = ifelse(renovated_ago == 0,                         built_ago,as.integer(format(Sys.Date(),"%Y")) - renovated_ago)
  )
```

```{r}
summary(dane)
```
## Eksploracyjna analiza danych

### Wizualizacja zmiennych

```{r}
#| echo: false
library(patchwork)

p1 <- ggplot(dane, aes(x = price)) +
  geom_histogram(bins = 30, fill = "steelblue", alpha = 0.7) +
  labs(title = "Rozkład cen domów", x = "Cena", y = "Liczba") +
  scale_x_continuous(labels = scales::comma)

p2 <- ggplot(dane, aes(x = sqft_living)) +
  geom_histogram(bins = 30, fill = "coral", alpha = 0.7) +
  labs(title = "Rozkład powierzchni mieszkalnej", x = "Powierzchnia (sqft)", y = "Liczba")

p3 <- ggplot(dane, aes(x = sqft_lot)) +
  geom_histogram(bins = 30, fill = "green", alpha = 0.7) +
  labs(title = "Rozkład powierzchni działki", 
       x = "Powierzchnia działki (sqft, log scale)", 
       y = "Liczba") +
  scale_x_log10(labels = scales::comma) +
  theme_minimal()

p4 <- ggplot(dane, aes(x = built_ago)) +
  geom_histogram(bins = 30, fill = "purple", alpha = 0.7) +
  labs(title = "Rozkład wieku budynków", x = "Wiek (lata)", y = "Liczba")


(p1 + p2) / (p3 + p4)


p5 <- ggplot(dane, aes(x = bathrooms)) +
  geom_histogram(bins = 20, fill = "orange", alpha = 0.7) +
  labs(title = "Rozkład liczby łazienek", x = "Liczba łazienek", y = "Liczba")

p6 <- ggplot(dane, aes(x = bedrooms)) +
  geom_histogram(bins = 15, fill = "pink", alpha = 0.7) +
  labs(title = "Rozkład liczby sypialni", x = "Liczba sypialni", y = "Liczba")

p7 <- ggplot(dane, aes(x = floors)) +
  geom_histogram(bins = 10, fill = "brown", alpha = 0.7) +
  labs(title = "Rozkład liczby pięter", x = "Liczba pięter", y = "Liczba")

p8 <- ggplot(dane, aes(x = renovated_ago)) +
  geom_histogram(bins = 30, fill = "gray", alpha = 0.7) +
  labs(title = "Rozkład czasu od renowacji", x = "Lata od renowacji", y = "Liczba")

(p5 + p6) / (p7 + p8)
```


```{r}

p9 <- ggplot(dane, aes(x = waterfront)) +
  geom_bar(fill = "blue", alpha = 0.7) +
  labs(title = "Dostęp do waterfront", x = "Waterfront", y = "Liczba")

p10 <- ggplot(dane, aes(x = view)) +
  geom_bar(fill = "red", alpha = 0.7) +
  labs(title = "Rodzaj widoku", x = "Ocena widoku", y = "Liczba")

p11 <- ggplot(dane, aes(x = condition)) +
  geom_bar(fill = "green", alpha = 0.7) +
  labs(title = "Stan techniczny", x = "Ocena stanu", y = "Liczba")

p12 <- ggplot(dane, aes(x = grade)) +
  geom_bar(fill = "purple", alpha = 0.7) +
  labs(title = "Ogólna ocena", x = "Ocena ogólna", y = "Liczba")

(p9 + p10) / (p11 + p12)
```


```{r}
#| echo: false

p13 <- ggplot(dane, aes(x = sqft_above)) +
  geom_histogram(bins = 30, fill = "darkblue", alpha = 0.7) +
  labs(title = "Powierzchnia nadziemna", x = "Sqft above", y = "Liczba")

p14 <- ggplot(dane, aes(x = sqft_basement)) +
  geom_histogram(bins = 30, fill = "darkgreen", alpha = 0.7) +
  labs(title = "Powierzchnia piwnicy", x = "Sqft basement", y = "Liczba")

p15 <- ggplot(dane, aes(x = sqft_living15)) +
  geom_histogram(bins = 30, fill = "darkred", alpha = 0.7) +
  labs(title = "Pow. mieszkalna sąsiedztwa", x = "Sqft living (sąsiedztwo)", y = "Liczba")

p16 <- ggplot(dane, aes(x = sqft_lot15)) +
  geom_histogram(bins = 30, fill = "darkorange", alpha = 0.7) +
  labs(title = "Pow. działki sąsiedztwa", x = "Sqft lot (sąsiedztwo)", y = "Liczba") +
  scale_x_continuous(labels = scales::comma)

(p13 + p14) / (p15 + p16)
```

<!-- ### Wykrywanie outlierów w zmiennych numerycznych -->

<!-- ```{r} -->
<!-- find_outliers_iqr <- function(x) { -->
<!--   qnt <- quantile(x, probs = c(0.25, 0.75), na.rm = TRUE) -->
<!--   iqr_val <- IQR(x, na.rm = TRUE) -->
<!--   lower_bound <- qnt[1] - 1.5 * iqr_val -->
<!--   upper_bound <- qnt[3] + 1.5 * iqr_val -->
<!--   return(x < lower_bound | x > upper_bound) -->
<!-- } -->

<!-- # 1. ANALIZa NUMERYCZNA: Zliczanie outlierów dla każdej numerycznej kolumny -->
<!-- outlier_summary <- map_dfr(names(select(dane, where(is.numeric))), function(col_name) { -->
<!--   x <- dane[[col_name]] -->
<!--   outliers <- find_outliers_iqr(x) -->
<!--   data.frame( -->
<!--     Variable = col_name, -->
<!--     outlier_count = sum(outliers, na.rm = TRUE), -->
<!--     outlier_percent = round(mean(outliers, na.rm = TRUE) * 100, 2) -->
<!--   ) -->
<!-- }) -->



<!-- ``` -->

### Wykresy pudełkowe zmiennych numerycznych

```{r}
boxplots <- dane |> 
  select(where(is.numeric))  |> 
  pivot_longer(everything(), names_to = "variable", values_to = "value") |> 
  ggplot(aes(x = variable, y = value)) +
  geom_boxplot(fill = "blue", outlier.color = "red", outlier.alpha = 0.7) +
  coord_flip() + 
  labs(title = "Wykresy pudełkowe zmiennych numerycznych (w oryginalnej skali)",
       x = "",
       y = "Wartość") +
  theme_minimal()
boxplots


boxplots_log <- dane |> 
  select(where(is.numeric)) |> 
  mutate(across(everything(), ~ log10(.x + 1))) |> 
  pivot_longer(everything(), names_to = "variable", values_to = "value") |> 
  ggplot(aes(x = variable, y = value)) +
  geom_boxplot(fill = "lightgreen", outlier.color = "red", outlier.alpha = 0.7) +
  coord_flip() +
  labs(title = "Wykresy pudełkowe zmiennych numerycznych (skala log10)",
       x = "",
       y = "log10(Wartość)") +
  theme_minimal()


boxplots + boxplots_log

p1 <- ggplot(dane, aes(x = "", y = price)) +
  geom_boxplot(fill = "salmon", outlier.color = "red") +
  labs(title = "Boxplot dla Ceny (price)", x = "") +
  scale_y_continuous(labels = scales::comma)
 p1
```

### Korelacje między zmiennymi

```{r}
#| echo: false
glimpse(dane)
```


```{r}
#| echo: false

dane_numeric <- dane |> 
  select(where(is.numeric))
ggpairs(dane_numeric)
```


```{r}
#| echo: false
library(corrplot)

numeric_data <- dane |>  select(where(is.numeric))
cor_matrix <- cor(numeric_data, use = "complete.obs")

price_cor <- cor_matrix["price", ]
strong_cor_vars <- names(which(abs(price_cor) > 0.3 & names(price_cor) != "price"))

filtered_cor <- cor_matrix[c("price", strong_cor_vars), c("price", strong_cor_vars)]

corrplot(filtered_cor, method = "color", type = "upper", 
         order = "hclust", tl.col = "black", tl.srt = 45,
         addCoef.col = "black", number.cex = 0.7,
         title = "Korelacje ze zmienną price (|r| > 0.3)",
         mar = c(0,0,1,0))
```
```{r}
#| echo: false
correlations <- as.data.frame(cor_matrix) |> 
  tibble::rownames_to_column("variable") |> 
  select(variable, price) |> 
  filter(variable != "price") |> 
  arrange(desc(abs(price)))

ggplot(correlations, aes(x = reorder(variable, price), y = price, fill = price)) +
  geom_bar(stat = "identity") +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, name = "Korelacja") +
  coord_flip() +
  theme_minimal() +
  labs(title = "Korelacja zmiennych z ceną domów",
       x = "Zmienna",
       y = "Współczynnik korelacji z ceną") +
  geom_text(aes(label = round(price, 2), 
                hjust = ifelse(price > 0, -0.1, 1.1)), 
            size = 3) +
  ylim(min(correlations$price) - 0.1, max(correlations$price) + 0.1)
```
```{r}
library(dplyr)
library(knitr)

correlation_table <- correlations|> 
  mutate(Correlation = round(price, 3),
         Strength = case_when(
           abs(price) >= 0.7 ~ "Bardzo silna",
           abs(price) >= 0.5 ~ "Silna", 
           abs(price) >= 0.3 ~ "Umiarkowana",
           abs(price) >= 0.2 ~ "Słaba",
           TRUE ~ "Bardzo słaba"
         ),
         Direction = ifelse(price > 0, "Dodatnia", "Ujemna")) |> 
  select(Variable = variable, Correlation, Strength, Direction )|>
  arrange(desc(abs(Correlation)))
kable(correlation_table, caption = "Ranking korelacji zmiennych z ceną")

correlation_table


```
## Podział danych na zbiory treningowy, walidacyjny i testowy
```{r}
#| echo: false
house_split <- initial_validation_split(dane, 
                            prop = c(0.6, 0.2),
                            strata = price)

house_train <- training(house_split) 
house_val_adv <- validation(house_split)
house_test  <- testing(house_split)

house_vfold <- vfold_cv(house_train, 
                       v = 10, 
                       repeats = 5, 
                       strata = price)

  
save(house_split, house_train, house_test, house_vfold,house_val_adv,
    file = "data/house_data_splits.Rdata")
```

## Modelowanie  

```{r}
lm_spec <- 
  linear_reg(penalty = tune(), mixture = tune()) |>
  set_engine("glmnet") |>
  set_mode("regression")

rf_spec <- 
  rand_forest(mtry = tune(), 
              min_n = tune(), 
              trees = 1000) |>
  set_engine("ranger") |> 
  set_mode("regression")

xgb_spec <-
  boost_tree(
    tree_depth = tune(),
    learn_rate = tune(),
    loss_reduction = tune(),
    min_n = tune(),
    sample_size = tune(),
    trees = 1000
  ) |> 
  set_engine("xgboost") |>
  set_mode("regression")


```

### Modelowanie - formuła


```{r}
minimal_recipe <- recipe(price ~ sqft_living + bedrooms + bathrooms + 
                         grade + condition + waterfront + view + 
                         built_ago, 
                       data = house_train) %>%
  
  step_log(price, base = 10, offset = 1) %>%
  step_log(sqft_living, base = 10, offset = 1) %>%
  
  step_dummy(all_nominal_predictors()) %>%
  
  step_normalize(all_numeric_predictors()) %>%
  
  step_zv(all_predictors())
```

### Modelowanie - zaawansowane przetwarzanie danych
```{r}
advanced_recipe <- recipe(price ~ ., data = house_train) %>%

  step_mutate(
    has_basement = as.factor(ifelse(sqft_basement > 0, 1, 0)),
    living_to_lot_ratio = sqft_living / (sqft_lot + 1),
    is_renovated = as.factor(ifelse(renovated_ago < built_ago, 1, 0)),
    total_rooms = bedrooms + bathrooms,
    price_per_sqft = price / (sqft_living + 1)
  ) %>%
  
  step_rm(sqft_basement, sqft_above) %>%
  
  step_other(view, threshold = 0.05) %>%
  step_other(condition, threshold = 0.05) %>%
  step_other(grade, threshold = 0.05) %>%
  
  step_interact(terms = ~ sqft_living:bedrooms) %>%
  step_interact(terms = ~ bathrooms:bedrooms) %>%
  
  step_dummy(all_nominal_predictors(), one_hot = FALSE) %>%
  
  step_corr(all_numeric_predictors(), threshold = 0.9) %>%
  
  step_zv(all_predictors()) %>%
  
  step_normalize(all_numeric_predictors())




```

##### Modelowanie - drzewiaste modele

```{r}
tree_recipe <- recipe(price ~ ., data = house_train) %>%

  step_log(price, base = 10, offset = 1) %>%
  
  step_mutate(
    has_basement = as.factor(ifelse(sqft_basement > 0, 1, 0)),
    is_renovated = as.factor(ifelse(renovated_ago < built_ago, 1, 0))
  ) %>%
  
  step_rm(sqft_basement, sqft_above) %>%
  
  step_other(view, threshold = 0.03) %>%
  step_other(condition, threshold = 0.03) %>%
  
  step_dummy(all_nominal_predictors(), one_hot = FALSE) %>%
  
  step_zv(all_predictors())
```


```{r}
save(lm_spec, rf_spec, xgb_spec,
     minimal_recipe, advanced_recipe, tree_recipe,
     file = "data/house_modeling_objects.Rdata")

prep(advanced_recipe, training = house_train) |> juice() 

prep(minimal_recipe, training = house_train) |> juice()

prep(tree_recipe, training = house_train) |> juice()

summary(advanced_recipe) |> knitr::kable()

summary(minimal_recipe) |> knitr::kable()

summary(tree_recipe) |> knitr::kable()


